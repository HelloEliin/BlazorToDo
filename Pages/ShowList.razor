@page "/ShowList/{listId}"; 
@using Services;
@using Data;
@inject ListHandler listHandler;
@inject NavigationManager manager;
@inject TaskHandler taskHandler;   


<h1>@theList.ListTitle</h1>
<table>
    <tr>
        <td>
            @foreach (var task in theList.Task)
            {
                if (task.Completed == true)
                {
                    <button @onclick="@(async () => await ShowTask(task))" class="btn-taskTitle" style="color:green">@task.TaskTitle</button>
                }
                else
                {
                    <button @onclick="@(async () => await ShowTask(task))" class="btn-taskTitle" style="color:red">@task.TaskTitle</button>
                }
                <br />
            }
        </td>
        <td><button @onclick="@(() => AddingTasks = !AddingTasks)" class="btn-small">Lägg till tasks</button><br /></td>
        <td> <button @onclick="@(() => Confirm = !Confirm)" class="btn-small">Ta bort lista</button><br /></td>

        <td> <button @onclick="@(() => ChangeName = !ChangeName)" class="btn-small">Ändra</button><br /></td>
    </tr>
</table>

@if (Confirm)
{
    <div class="pt-5">Vill du ta bort listan?</div>
    <table>
        <tr>
    <td> <button @onclick="@(async () => await DeleteList(theList))" class="btn-small">Ja</button></td>
    <td> <button @onclick="@(() => Confirm = !Confirm)" class="btn-small">Nej</button></td>
        </tr>
    </table> 
}


@if (AddingTasks)
{<div class="pt-5">
    <EditForm Model="@newTask" OnValidSubmit="@AddTask">
        <DataAnnotationsValidator />
        <InputText id="name" @bind-Value="newTask.TaskTitle" /> <br />
            <button class="btn-small" type="submit">Lägg till</button>
    </EditForm>
    </div>
}


@if (ChangeName)
{<div class="pt-5">
    <table class="pt-5 pb-3">
   <tr class="pt-5">Lägg till som Weekly-list
    <input type="checkbox" value="@theList.ThisWeek" @onchange="@(() => ThisWeek(theList))" /></tr>
</table>
  
    <p class="pt-5">Nytt namn på listan</p>   
       <EditForm Model="@theList" OnValidSubmit="@(async () => await SaveChanges(theList))">
        <DataAnnotationsValidator />
        <InputText id="name" @bind-Value="theList.ListTitle" /> <br />
        <button type="submit" class="btn-small">Spara</button>
    </EditForm>
    </div> 
}


@code {
    private CreateToDoList theList = new();
    private Data.Task newTask = new();
    public bool ChangeName { get; set; } = false;
    public bool AddingTasks { get; set; } = false;
    public bool Confirm { get; set; } = false;

    [Parameter]
    public string listId { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Guid listID = Guid.Parse(listId);
        theList = await listHandler.ShowList(listID);
    }

    public async System.Threading.Tasks.Task ShowTask(Data.Task task)
    {
        manager.NavigateTo($"/ShowTask/{task.Id.ToString()}");
    }

    public async void AddTask()
    {
        Guid listID = Guid.Parse(listId);
        newTask.CreateToDoListId = listID;
        newTask.Id = Guid.NewGuid();  
        theList.Task.Add(newTask);
        await taskHandler.AddTask(newTask);
        newTask = new();
        StateHasChanged();
    }


    public async System.Threading.Tasks.Task DeleteList(CreateToDoList list)
    {
        await listHandler.DeleteList(theList);
        manager.NavigateTo($"/MyLists");      
    }

    public async System.Threading.Tasks.Task SaveChanges(CreateToDoList list)
    {
        ChangeName = false;
        await listHandler.UpdateList(list);
    }


    public async System.Threading.Tasks.Task ThisWeek(CreateToDoList newList)
    {
        newList.ThisWeek = !newList.ThisWeek;
        await listHandler.UpdateList(newList);
    }
}