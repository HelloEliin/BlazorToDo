@page "/ShowList/{listId}"; 
@using Services;
@using Data;
@inject ListHandler listHandler;
@inject NavigationManager manager;
@inject TaskHandler taskHandler;   


<h1>@theList.ListTitle</h1>

<div class="flex flex-row">
    @foreach (var task in theList.Task)
    {

       
        <button @onclick="@(async () => await ShowTask(task))" class="btn-taskTitle">@task.TaskTitle</button><br />


    }

</div>

<div class="pt-5">
<EditForm Model="@tasks" OnSubmit="@AddTask">
    <InputText id="name"  @bind-Value="task.TaskTitle" /> <br /> 
    <button type="submit" class="btn-small">Lägg till ny task</button>
</EditForm>
</div>






@code {

    public CreateToDoList theList = new ();
    public List<Data.Task> tasks = new();
    public Data.Task task= new();
    public bool ChangeName { get; set; } = false;    //helt klar förutom att radera listan


    [Parameter]
    public string listId { get; set; }


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Guid listID = Guid.Parse(listId);
        theList = await listHandler.ShowList(listID);
    }

    public async System.Threading.Tasks.Task ShowTask(Data.Task task)
    {
        manager.NavigateTo($"/ShowTask/{task.Id.ToString()}");
    }

    public async void AddTask()  
    {
        Guid listID = Guid.Parse(listId);
        task.CreateToDoListId = listID;
        task.Id = Guid.NewGuid();  
        theList.Task.Add(task);
        await taskHandler.AddTask(task); 

    }


    //public async System.Threading.Tasks.Task DeleteTask(Data.Task task) //klart
    //{
    //    theList.Task.Remove(task); 
    //    await taskHandler.DeleteTask(task);

    //}

    //public async System.Threading.Tasks.Task CompletedTask(Data.Task task)  //klart
    //{
    //    await taskHandler.MarkAsComplete(task);
    //}

    //public void EditTask()
    //{
    //    ChangeName = !ChangeName;

    //}


    //public async System.Threading.Tasks.Task SaveChanges(Data.Task task)  //klart
    //{
    //    ChangeName = false;
    //    await taskHandler.UpdateTask(task);
    //}


    //public async System.Threading.Tasks.Task DeleteList()
    //{
    //    await listHandler.DeleteList(theList);
    //}

}