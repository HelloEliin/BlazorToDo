@page "/ShowList/{listId}"; 
@using Services;
@using Data;
@inject ListHandler listHandler;
@inject NavigationManager manager;
@inject TaskHandler taskHandler;   


<h1>@theList.ListTitle</h1>
<table>
    <tr>
        <td>
            @foreach (var task in theList.Task)
            {                
                    if(task.Completed == true)
                    {
                        <button @onclick="@(async () => await ShowTask(task))" class="btn-taskTitle" style="color:green">@task.TaskTitle</button>
                    }else{
                        <button @onclick="@(async () => await ShowTask(task))" class="btn-taskTitle" style="color:red">@task.TaskTitle</button>
                    }
                         
                <br />
            }
        </td>
    </tr>
</table>

<div class="pt-5">
    <EditForm Model="@newTask" OnSubmit="@AddTask">
        <InputText id="name" @bind-Value="newTask.TaskTitle" /> <br />
        <button type="submit" class="btn-small">Lägg till ny task</button>
    </EditForm>
    <button @onclick="@(async () => await DeleteList(theList))" class="btn-small">Ta bort lista</button><br />
    <button @onclick="@(async () => await UpdateList(theList))" class="btn-small">Ändra listnamn</button><br />
    @if (@ChangeName)
    {
        <EditForm Model="@theList" OnSubmit="@(async () => await SaveChanges(theList))">
            <InputText id="name" @bind-Value="theList.ListTitle" /> <br />
            <button type="submit" class="btn-small">Spara</button>
        </EditForm>


    }
</div>



@code {
    private CreateToDoList theList = new();
    private Data.Task newTask = new();
    public bool ChangeName { get; set; } = false;

    [Parameter]
    public string listId { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Guid listID = Guid.Parse(listId);
        theList = await listHandler.ShowList(listID);
    }

    public async System.Threading.Tasks.Task ShowTask(Data.Task task)
    {
        manager.NavigateTo($"/ShowTask/{task.Id.ToString()}");
    }

    public async void AddTask()
    {
        Guid listID = Guid.Parse(listId);
        newTask.CreateToDoListId = listID;
        newTask.Id = Guid.NewGuid();  
        theList.Task.Add(newTask);
        await taskHandler.AddTask(newTask);
        newTask = new();
        StateHasChanged();
    }


    public async System.Threading.Tasks.Task DeleteList(CreateToDoList list)
    {
        await listHandler.DeleteList(theList);
        manager.NavigateTo($"/MyLists");      
    }

    public async System.Threading.Tasks.Task SaveChanges(CreateToDoList list)
    {
        ChangeName = false;
        await listHandler.UpdateList(list);
    }


    public async System.Threading.Tasks.Task UpdateList(CreateToDoList list)
    {
        ChangeName = true;
    }

}