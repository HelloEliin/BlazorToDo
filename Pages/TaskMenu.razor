@page "/ShowTask/{taskId}";
@using Services;
@using Data;
@inject ListHandler listHandler;
@inject NavigationManager manager;
@inject TaskHandler taskHandler;

<h3>TaskMenu</h3>

<p style="@style">@task.TaskTitle</p>
<button @onclick="@(async () => await DeleteTask(task))" class="btn-small">Ta bort</button>
<button @onclick="@(async () => await CompletedTask(task))" class="btn-small" style="@styleBtn">Klar</button>




<button @onclick="(() => EditTask())" class="btn-small">Ändra</button>
<button @onclick="(() => BackToList(task.CreateToDoListId))" class="btn-small w-auto">Tillbaka till listan</button>


@if (@ChangeName)
{
    <EditForm Model="@task" OnSubmit="@(async () => await SaveChanges(task))">
        <InputText id="name" @bind-Value="task.TaskTitle" /> <br />
        <button type="submit" class="btn-small">Spara</button>
    </EditForm>

}

@code {

    [Parameter]
    public string taskId { get; set; }

    public static Data.Task task { get; set; } = new();
    public string style { get; set; }
    public string styleBtn { get; set; }
    public bool ChangeName { get; set; } = false;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Guid taskID = Guid.Parse(taskId);
        task = await taskHandler.GetSingelTask(taskID);
        style = task.Completed == true ? "color:green" : "color:red";
        styleBtn = task.Completed == true ? "background-color:green" : "background-color:red";

    }

    public async System.Threading.Tasks.Task DeleteTask(Data.Task task)
    {
        await taskHandler.DeleteTask(task);
        var listId = task.CreateToDoListId;
        manager.NavigateTo($"/ShowList/{listId}");
    }

    public async System.Threading.Tasks.Task CompletedTask(Data.Task task)  
    {
        Guid taskID = Guid.Parse(taskId);
        task = await taskHandler.MarkAsComplete(task);
        style = task.Completed == true ? "color:green" : "color:red";
        styleBtn = task.Completed == true ? "background-color:green" : "background-color:red";
    }

    public void EditTask()
    {
        ChangeName = !ChangeName;
    }

    public async System.Threading.Tasks.Task SaveChanges(Data.Task task)  
    {
        ChangeName = false;
        await taskHandler.UpdateTask(task);
    }

    public void BackToList(Guid listId)  
    {
        manager.NavigateTo($"/ShowList/{listId}");
    }
}
