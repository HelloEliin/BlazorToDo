@page "/ShowTask/{taskId}";
@using Services;
@using Data;
@inject ListHandler listHandler;
@inject NavigationManager manager;
@inject TaskHandler taskHandler;


<h1 style="@Style">@Task.TaskTitle</h1>
<button @onclick="@(() => Confirm = !Confirm)" class="btn-small">Ta bort</button>
<button @onclick="@(async () => await CompletedTask(Task))" class="btn-small" style="@StyleBtn">Klar</button>

<button @onclick="(() => ChangeName =! ChangeName)" class="btn-small">Ändra</button>
<button @onclick="(() => BackToList(Task.CreateToDoListId))" class="btn-small w-auto">Tillbaka till listan</button>

@if (Confirm)
{
    <div class="pt-5">Vill du ta bort tasken?</div>
    <table>
        <tr>
            <td> <button @onclick="@(async () => await DeleteTask(Task))" class="btn-small">Ja</button></td>
            <td> <button @onclick="@(() => Confirm = !Confirm)" class="btn-small">Nej</button></td>
        </tr>
    </table>
}

@if (@ChangeName)
{
    <EditForm Model="@Task" OnSubmit="@(async () => await SaveChanges(Task))">
        <InputText id="name" @bind-Value="Task.TaskTitle" /> <br />
        <button type="submit" class="btn-small">Spara</button>
    </EditForm>
}

@code {

    [Parameter]
    public string TaskId { get; set; }

    private static Data.Task Task { get; set; } = new();
    private string Style { get; set; }
    public string StyleBtn { get; set; }
    public bool ChangeName { get; set; } = false;
    public bool Confirm { get; set; } = false;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Guid taskID = Guid.Parse(TaskId);
        Task = await taskHandler.GetSingelTask(taskID);
        Style = Task.Completed == true ? "color:green" : "color:red";
        StyleBtn = Task.Completed == true ? "background-color:green" : "background-color:red";
    }

    public async System.Threading.Tasks.Task DeleteTask(Data.Task task)
    {
        await taskHandler.DeleteTask(task);
        var listId = task.CreateToDoListId;
        manager.NavigateTo($"/ShowList/{listId}");
    }

    public async System.Threading.Tasks.Task CompletedTask(Data.Task task)  
    {
        Guid taskID = Guid.Parse(TaskId);
        task = await taskHandler.MarkAsComplete(task);
        Style = task.Completed == true ? "color:green" : "color:red";
        StyleBtn = task.Completed == true ? "background-color:green" : "background-color:red";
    }

    public async System.Threading.Tasks.Task SaveChanges(Data.Task task)  
    {
        ChangeName = false;
        await taskHandler.UpdateTask(task);
    }

    public void BackToList(Guid listId)  
    {
        manager.NavigateTo($"/ShowList/{listId}");
    }
}
