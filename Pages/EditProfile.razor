@page "/editprofile/{userId}"
@using Services;
@using Data;
@inject UserHandler userHandler;
@inject NavigationManager manager;

<h3>Redigera profil </h3>
<p class="text-success">Redigera users profiler som admin</p>

    <EditForm Model="@user" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <p>Förnamn</p>
    <InputText id="name" @bind-Value="user.FirstName" /><br />
        <ValidationMessage For="@(() => user.FirstName)" />
    <p>Efternamn</p>
    <InputText id="name" @bind-Value="user.LastName" /><br />
        <ValidationMessage For="@(() => user.LastName)" />
    <p>Username</p>
    <InputText id="name" @bind-Value="user.UserName" /><br />
    <ValidationMessage For="@(() => user.UserName)" />
    <P>Lösenord</P>
    <InputText id="name" @bind-Value="user.Password" /><br/>
        <ValidationMessage For="@(() => user.Password)" />
    <p>Email</p>
    <InputText id="name" @bind-Value="user.Email" /><br />
        <ValidationMessage For="@(() => user.Email)" />
    <button class="btn-small" type="submit">Submit</button>
</EditForm>


<button @onclick="@BackToUsers" class="btn-small">Gå tillbaka</button>


@code {

    [Parameter]
    public string userId { get; set; }
    private CreateUser user = new CreateUser();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Guid userID = Guid.Parse(userId);
        user = await userHandler.GetUser(userID);
    }

    public async System.Threading.Tasks.Task HandleSubmit()
    {
        user = await userHandler.EditProfile(user);
        manager.NavigateTo($"/ShowUser/{user.Id.ToString()}");
    }

    public void BackToUsers()
    {
        manager.NavigateTo($"/ShowUser/{userId}");
    }

}